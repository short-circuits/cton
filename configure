#!/bin/sh

LC_ALL=C
export LC_ALL

. config/options
. config/init

. config/os/detect
. config/cc/detect

. config/sources

. config/make

# if [[ ! -d $CTON_BUILDDIR ]]; then
# 	mkdir -p $CTON_BUILDDIR
# fi

# if [[ ! -d $CTON_BUILDDIR/objs ]]; then
# 	mkdir -p $CTON_BUILDDIR/objs
# fi

# echo "checking for OS ... "
# CTON_SYSTEM=`uname -s 2>/dev/null`
# CTON_RELEASE=`uname -r 2>/dev/null`
# CTON_MACHINE=`uname -m 2>/dev/null`

# echo " - $CTON_SYSTEM $CTON_RELEASE $CTON_MACHINE"


# echo "checking for C compiler ... "
# if [ "$CC" = cl ]; then
# 	CTON_CC=msvc
# 	CTON_CC_STRING="Microsoft Visual C++ compiler"

# elif [ "$CC" = wcl386 ]; then
# 	CTON_CC=owc
# 	CTON_CC_STRING="Open Watcom C compiler"

# elif [ "$CC" = bcc32 ]; then
# 	CTON_CC=bcc
# 	CTON_CC_STRING="Borland C++ compiler"

# elif `$CC -V 2>&1 | grep '^Intel(R) C' >/dev/null 2>&1`; then
# 	CTON_CC=icc
# 	CTON_CC_STRING="Intel C++ compiler"

# elif `$CC -v 2>&1 | grep 'gcc version' >/dev/null 2>&1`; then
# 	CTON_CC=gcc
# 	CTON_CC_STRING="GNU C compiler"

# elif `$CC -v 2>&1 | grep 'clang version' >/dev/null 2>&1`; then
# 	CTON_CC=clang
# 	CTON_CC_STRING="Clang C compiler"

# elif `$CC -v 2>&1 | grep 'LLVM version' >/dev/null 2>&1`; then
# 	CTON_CC=clang
# 	CTON_CC_STRING="Clang C compiler"

# elif `$CC -V 2>&1 | grep 'Sun C' >/dev/null 2>&1`; then
# 	CTON_CC=sunc
# 	CTON_CC_STRING="Sun C compiler"

# elif `$CC -V 2>&1 | grep '^Compaq C' >/dev/null 2>&1`; then
# 	CTON_CC=ccc
# 	CTON_CC_STRING="Compaq C compiler"

# elif `$CC -V 2>&1 | grep '^aCC: ' >/dev/null 2>&1`; then
# 	CTON_CC=acc
# 	CTON_CC_STRING="HP aC++ compiler"

# else
# 	CTON_CC=unknown

# 	echo "Unknow"

# 	echo "Cannot find a C compiler, but it was necessary."
# 	exit -1
# fi

# echo " - $CTON_CC_STRING"

# echo "checking for make ... "
# if `make --version 2>&1 | grep 'GNU Make' >/dev/null 2>&1`; then
# 	CTON_MAKE='GNU Make'
# else
# 	CTON_MAKE='UNIX Make'
# fi
# echo " - $CTON_MAKE"

# cton_cc_args_test() {
# 	echo "checking for $CTON_CC support $cton_cc_args"

# cat << END > $CTON_AUTOTEST.c
# #include <stdio.h>
# int main(void) {
# 	return 0;
# }
# END

# 	if `$CTON_CC $cton_cc_args $CTON_AUTOTEST.c -o $CTON_AUTOTEST 2>&1 | grep "unknown" >/dev/null 2>&1`; then
# 		cton_have=no
# 	else
# 		cton_have=yes
# 		if [[ $necessary == no ]]; then
# 			cton_cc_args="$cton_cc_args $cton_args"
# 		fi
# 	fi

# 	if [[ $necessary == yes && $cton_have == no ]]; then
# 		echo "$CTON_CC does not support $cton_cc_args, but it was necessary."
# 		exit -1
# 	fi
# }

# dwy_macro_test() {
# 	echo -n "checking for macro $dwy_macro ..."

# cat << END > $DWY_AUTOTEST.c
# #include <$dwy_include>
# int main(void) {
# 	long t = (long)$dwy_macro;
# 	return 0;
# }
# END

# 	if `$CTON_CC $DWY_AUTOTEST.c -o $DWY_AUTOTEST 2>&1 | grep "error" >/dev/null 2>&1`; then
# 		dwy_have=no
# 	else
# 		dwy_have=yes
# 		if [[ $necessary == no ]]; then
# 			dwy_have_macro[${#dwy_have_macro[@]}]=$dwy_macro
# 		fi
# 	fi
# 	echo " $dwy_have"

# 	if [[ $necessary == yes && $dwy_have == no ]]; then
# 		echo "Cannot find macro $dwy_macro, but it was necessary."
# 		exit -1
# 	fi
# }

# dwy_header_test() {
# 	echo -n "checking for $dwy_header ..."

# cat << END > $DWY_AUTOTEST.c
# #include <$dwy_header>
# int main(void) {
# 	return 0;
# }
# END

# 	if `$CTON_CC $DWY_AUTOTEST.c -o $DWY_AUTOTEST 2>&1 | grep "error" >/dev/null 2>&1`; then
# 		dwy_have=no
# 	else
# 		dwy_have=yes
# 		if [[ $necessary == no ]]; then
# 			dwy_have_macro[${#dwy_have_macro[@]}]=$dwy_macro
# 		fi
# 	fi
# 	echo " $dwy_have"

# 	if [[ $necessary == yes && $dwy_have == no ]]; then
# 		echo "Cannot find $dwy_header, but it was necessary."
# 		exit -1
# 	fi
# }

# necessary=yes
# dwy_headers=('stdio.h' 'stdlib.h' 'stdarg.h' 'string.h' 'signal.h'\
# 	'unistd.h' 'sys/socket.h' 'stdlib.h' 'pthread.h' 'ctype.h'\
# 	'time.h' 'sys/stat.h' 'sys/types.h' 'sys/stat.h' 'sys/wait.h'\
# 	'netinet/in.h' 'arpa/inet.h')
# for element in "${dwy_headers[@]}"
# do
# 	dwy_header=$element
# 	dwy_header_test
# done

# dwy_include="signal.h"
# necessary=no
# dwy_macros=('SIGHUP' 'SIGINT' 'SIGQUIT' 'SIGILL' 'SIGTRAP' 'SIGABRT' 'SIGKILL')
# for element in "${dwy_macros[@]}"
# do
# 	dwy_macro=$element
# 	dwy_macro_test
# done

# dwy_include="sys/socket.h"
# necessary=yes
# dwy_macro=PF_INET
# dwy_macro_test

# necessary=no
# dwy_macro=PF_INET6
# dwy_macro_test

# necessary=yes
# dwy_macro=SOCK_STREAM
# dwy_macro_test

# dwy_macro=SOL_SOCKET
# dwy_macro_test

# necessary=no
# dwy_macro=SO_RCVTIMEO
# dwy_macro_test

# dwy_macro=SO_REUSEADDR
# dwy_macro_test

# necessary=no
# cton_cc_args=('-pipe' '-O2' '-Wall' '-Wextra' '-std=c89' '-Wcomment' '-Werror' '-g')
# for element in "${cton_cc_args[@]}"
# do
# 	cton_cc_args=$element
# 	cton_cc_args_test
# done


# echo -n "checking for modules ... "

# for element in `ls src`
# do
# 	dwy_core_module=`cat src/$element | grep dwy_core_module_t | awk '{print $2}'`
# 	if [[ -n $dwy_core_module ]]; then
# 		echo -n " $dwy_core_module"
# 		dwy_core_modules[${#dwy_core_modules[@]}]=$dwy_core_module
# 	fi
# done
# echo ""


# echo "creating $DWY_CONFIG_C"

# cat << END > $DWY_CONFIG_C
# /* dwy auto config file */
# #include <dwy.h>
# dwy_core_module_t *dwy_core_modules[] = {
# END


# for element in "${dwy_core_modules[@]}"
# do
# 	echo "    &$element," >> $DWY_CONFIG_C
# done


# cat << END >> $DWY_CONFIG_C
# 	NULL
# };
# END


# echo "creating $DWY_CONFIG_H"
# cat << END > $DWY_CONFIG_H
# /*
#  * dwy config header
#  * auto created by script
#  */
# #ifndef DWY_CONFIG_H
# #define DWY_CONFIG_H 1
# #include <dwy_module.h>
# #define DWY_SYSTEM_STRING "$DWY_SYSTEM $DWY_RELEASE $DWY_MACHINE"
# #define DWY_COMPILER_STRING "$CTON_CC_STRING"
# END

# for macro in "${dwy_have_macro[@]}"
# do
# 	echo "#define DWY_HAVE_$macro 1" >> $DWY_CONFIG_H
# done

# echo "" >> $DWY_CONFIG_H

# for element in "${dwy_core_modules[@]}"
# do
# 	echo "extern dwy_core_module_t $element;" >> $DWY_CONFIG_H
# done

# echo "#define DWY_COMPILE_FLAGS \"$CTON_cc_args\"" >> $DWY_CONFIG_H

# cat << END >> $DWY_CONFIG_H
# #endif /* DWY_CONFIG_H */
# END

# rm $DWY_AUTOTEST.c
# rm $DWY_AUTOTEST

# echo "creating $DWY_MAKEFILE"
# if [[ $DWY_MAKE == 'GNU Make' ]]; then
# cat << END > $DWY_MAKEFILE
# # Makefile for dwy project
# DIR_INC = ../include
# DIR_SRC = ../src
# DIR_OBJ = ./obj
# DIR_BIN = ./bin
# SRC = \$(wildcard \${DIR_SRC}/*.c)
# OBJ = \$(patsubst %.c,\${DIR_OBJ}/%.o,\$(notdir \${SRC}))
# TARGET = tinyhttpd
# BIN_TARGET = \${DIR_BIN}/\${TARGET}
# CC = $CTON_CC
# CFLAGS =$CTON_cc_args -I\${DIR_INC} -I./include
# \${BIN_TARGET}:\${OBJ} \${DIR_BIN} obj/dwy_config.o
# 	\$(CC) \$(CFLAGS) \$(OBJ) obj/dwy_config.o -o \$@ -lpthread
# \${DIR_OBJ}/%.o:\${DIR_SRC}/%.c \${DIR_OBJ}
# 	\$(CC) \$(CFLAGS) -c \$< -o \$@
# obj/dwy_config.o:src/dwy_config.c
# 	\$(CC) \$(CFLAGS) -c \$< -o \$@
# \${DIR_OBJ}:
# 	@mkdir -p \$@
# \${DIR_BIN}:
# 	@mkdir -p \$@
# .PHONY:clean
# clean:
# 	rm \${DIR_OBJ}/*.o
# 	rm \${DIR_BIN}/\${TARGET}
# END
# else
# 	echo 'No rule to create UNIX Makefile'
# 	#Please add UNIX Makefile here.
# fi
